name: Update Latest Tweet

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch: 

jobs:
  update-tweet:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install twitter-api-v2 # Install the Twitter API client library

      - name: Fetch latest tweet and update README
        env:
          CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          CONSUMER_SECRET: ${{ secrets.TWITTER_SECRET }}
          ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          TWITTER_HANDLE: sanskar2804 
        run: |
          node -e '
            const { TwitterApi } = require("twitter-api-v2");
            const fs = require("fs");

            async function updateReadme() {
              const client = new TwitterApi({
                appKey: process.env.CONSUMER_KEY,
                appSecret: process.env.CONSUMER_SECRET,
                accessToken: process.env.ACCESS_TOKEN,
                accessSecret: process.env.ACCESS_TOKEN_SECRET,
              });

              try {
                // Get user ID from handle
                const { data: user } = await client.v2.userByUsername(process.env.TWITTER_HANDLE);
                if (!user) {
                  console.error("Twitter user not found.");
                  return;
                }

                // Get latest tweet by user ID, including media attachments
                const { data: tweets, includes } = await client.v2.userTimeline(user.id, {
                  max_results: 1,
                  "tweet.fields": "created_at,text,entities,attachments",
                  "media.fields": "url,preview_image_url,type", // Get media details
                  expansions: "attachments.media_keys", // Expand media_keys to media objects
                  exclude: "replies,retweets"
                });

                if (tweets && tweets.length > 0) {
                  const latestTweet = tweets[0];
                  let tweetText = latestTweet.text;
                  const tweetUrl = `https://twitter.com/${process.env.TWITTER_HANDLE}/status/${latestTweet.id}`;
                  let mediaContent = "";

                  // Basic markdown linking for URLs if present
                  if (latestTweet.entities && latestTweet.entities.urls) {
                    latestTweet.entities.urls.forEach(url => {
                      tweetText = tweetText.replace(url.url, `[${url.display_url || url.url}](${url.expanded_url})`);
                    });
                  }

                  // Handle media attachments
                  if (includes && includes.media && includes.media.length > 0) {
                    const media = includes.media[0]; // Assuming only one media attachment for simplicity
                    if (media.type === "photo" && media.url) {
                      mediaContent = `\n\n![Tweet Image](${media.url})`;
                    } else if (media.type === "video" || media.type === "animated_gif") {
                      // For videos/GIFs, we can only link to a preview image (if available) or the tweet
                      const previewUrl = media.preview_image_url || `https://placehold.co/400x200/cccccc/000000?text=Video+Preview`;
                      mediaContent = `\n\n[![Video Preview](${previewUrl})](${tweetUrl})`;
                    }
                  }
                  
                  const formattedTweet = `🐦 Latest Tweet:\n\n> ${tweetText}\n\n[View on Twitter](${tweetUrl})${mediaContent}`;
                  
                  let readmeContent = fs.readFileSync("README.md", "utf8");
                  const startMarker = "<!-- LATEST_TWEET_START -->";
                  const endMarker = "<!-- LATEST_TWEET_END -->";

                  if (readmeContent.includes(startMarker) && readmeContent.includes(endMarker)) {
                    const before = readmeContent.substring(0, readmeContent.indexOf(startMarker) + startMarker.length);
                    const after = readmeContent.substring(readmeContent.indexOf(endMarker));
                    readmeContent = `${before}\n${formattedTweet}\n${after}`;
                  } else {
                    console.warn("Markers for latest tweet not found in README.md. Please add them.");
                  }
                  fs.writeFileSync("README.md", readmeContent);
                  console.log("README updated with latest tweet.");
                } else {
                  console.log("No tweets found or unable to fetch latest tweet.");
                }
              } catch (error) {
                console.error("Error fetching or updating tweet:", error);
              }
            }
            updateReadme();
          '

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main # Or your default branch name (e.g., master)
          message: "docs: Update latest tweet in README with media"
          commit_user_name: github-actions[bot]
          commit_user_email: github-actions[bot]@users.noreply.github.com
